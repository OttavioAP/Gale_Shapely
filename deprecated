/*
 * Name: <your name>
 * EID: <your EID>
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Collections;
import java.util.List;

/**
 * Your solution goes in this class.
 *
 * Please do not modify the other files we have provided for you, as we will use
 * our own versions of those files when grading your project. You are
 * responsible for ensuring that your solution works with the original version
 * of all the other files we have provided for you.
 *
 * That said, please feel free to add additional files and classes to your
 * solution, as you see fit. We will use ALL of your additional files when
 * grading your solution.
 */
public class Program1 extends AbstractProgram1 {


    /**
     * Determines whether a candidate Matching represents a solution to the stable matching problem.
     * Study the description of a Matching in the project documentation to help you with this.
     */
    /*
        * Check for type one instability
    For each high school h 
        For each student s’ that is unmatched
        Check if the high school would rather have s’ than one of their current students
        if so, declare unstable

        Check for type two instability

    For each high school h 
        For each student s’ that’s already matched
            Check if the high school would rather have s’ than one of their current students
                If so, check if the student would rather have h than h’, their current high school
                    if so, declare unstable
            otherwise do nothing
        


     * 
     */

    @Override
public boolean isStableMatching(Matching problem) {
    int m = problem.getHighSchoolCount();
    int n = problem.getStudentCount();

    ArrayList<ArrayList<Integer>> highschoolPrefs = problem.getHighSchoolPreference();//indexed by high school, contains an arraylist of their student pref, indexed by student
    ArrayList<ArrayList<Integer>> studentPrefs = problem.getStudentPreference();//indexed by student, contains an arraylist of their high school pref, indexed by high school
    ArrayList<Integer> highschoolSpots = problem.getHighSchoolSpots();//indexed by high schools, contains there # of spots
    ArrayList<Integer> currMatching = problem.getStudentMatching();

for(int h =0; h<m;h++){
    for(int sp =0;sp<n;sp++){
        
    }
}


    return true;
}






// Helper function to get the least preferred student a school is currently matched with
private int getLeastPreferredStudent(int school, List<Integer> studentMatching, 
                                     List<List<Integer>> schoolPreferences) {
    int leastPreferredStudent = -1;
    int leastPreferredRank = -1;

    for (int student = 0; student < studentMatching.size(); ++student) {
        if (studentMatching.get(student) == school) {
            int rank = schoolPreferences.get(school).indexOf(student);
            if (rank > leastPreferredRank) {
                leastPreferredRank = rank;
                leastPreferredStudent = student;
            }
        }
    }

    return leastPreferredStudent;
}



//     @Override
// public boolean isStableMatching(Matching problem) {
//         int m = problem.getHighSchoolCount();
//         int n = problem.getStudentCount();

//         ArrayList<ArrayList<Integer>> highschoolPrefs = problem.getHighSchoolPreference();//indexed by high school, contains an arraylist of their student pref, indexed by student
//         ArrayList<ArrayList<Integer>> studentPrefs = problem.getStudentPreference();//indexed by student, contains an arraylist of their high school pref, indexed by high school
//         ArrayList<Integer> highschoolSpots = problem.getHighSchoolSpots();//indexed by high schools, contains there # of spots
//         ArrayList<Integer> currMatching = problem.getStudentMatching();
    
    
//         for(int h =0;h < m;h++ ){//for each high school h
//             for(int sp =0;sp <n;sp++){//for each student, sp
//                 if(currMatching.get(sp)==-1){//if unmatched
//                     //check if the high school would rather have them then any of their students
//                     //do this by iterating through the matchlist, finding each student of that high school in the preference list of that high school,
//                     // and comparing that index to the index of the student z in the preference list
//                     for(int s=0;s < n;s++){//for each student in the matchlist s
//                         if(currMatching.get(s) == h){//if that student is matched to h
//                             //check if h would rather have s than s'
//                             if(highschoolPrefs.get(h).indexOf(s) > highschoolPrefs.get(h).indexOf(sp)){//lower index is more desirable, condition true if sp better
//                                 return false;
//                             }
//                         } 

//                     }
//                 }else{//if matched
//                     //check if the high school would rather have them then one of their students
//                     //do this by iterating through the matchlist, finding each student of that high school in the preference list of that high school,
//                     // and comparing that index to the index of the student z in the preference list

//                     int hp = currMatching.get(sp); //sps current high school, hp

//                     //if so, check if the student would rather have that high school than their current high school
//                     for(int s=0;s < n;s++){//for each student in the matchlist s
//                         if(currMatching.get(s) == h){//if that student is matched to h
//                             //check if h would rather have s than s'
//                             if(highschoolPrefs.get(h).indexOf(sp) < highschoolPrefs.get(h).indexOf(s)){//lower index is more desirable, condition true if sp better
//                                 //check if sp would rather have h than h'
//                                 if(studentPrefs.get(sp).indexOf(h) < studentPrefs.get(sp).indexOf(hp)){
//                                     return false;
//                                 }

//                             }
//                         } 

//                     }
//                 }

//             }

          

        
            


//         }
 
//     return true;
//     }




        /*
         * Loop one: repeat until there are no remaining spots. This will work because there are more students than spots
         *      find a student who hasn't proposed to every school yet, if you can't, end the program and return the current matching
         *      find the next high school on his preference list
         *      
         *      
         * 
         * 
         * 
         */


    /**
     * Determines a solution to the stable matching problem from the given input set. Study the
     * project description to understand the variables which represent the input to your solution.
     *
     * @return A stable Matching.
     */
    @Override
    public Matching stableMatchingGaleShapley_studentoptimal(Matching problem) {
        int m = problem.getHighSchoolCount();
        int n = problem.getStudentCount();
        ArrayList<ArrayList<Integer>> highschoolPrefs = problem.getHighSchoolPreference();
        ArrayList<ArrayList<Integer>> studentPrefs = problem.getStudentPreference();
        ArrayList<Integer> highschoolSpots = problem.getHighSchoolSpots();
    
        ArrayList<Integer> studentMatching = new ArrayList<>(Collections.nCopies(n, -1)); // Initialize all students as unmatched
        ArrayList<Integer> studentNextProposeIndex = new ArrayList<>(Collections.nCopies(n, 0)); // Index to keep track of the next high school to propose
    
        int totalSpots = problem.totalHighSchoolSpots();
    
        while (totalSpots > 0) {
            int freeStudent = -1;
    
            // Find a free student who hasn't proposed to every high school yet
            for (int i = 0; i < n; i++) {
                if (studentMatching.get(i) == -1 && studentNextProposeIndex.get(i) < m) {
                    freeStudent = i;
                    break;
                }
            }
    
            if (freeStudent != -1) {
                int highSchool = studentPrefs.get(freeStudent).get(studentNextProposeIndex.get(freeStudent));
                studentNextProposeIndex.set(freeStudent, studentNextProposeIndex.get(freeStudent) + 1);
    
                if (highschoolSpots.get(highSchool) > 0) {
                    studentMatching.set(freeStudent, highSchool);
                    highschoolSpots.set(highSchool, highschoolSpots.get(highSchool) - 1);
                    totalSpots--;
                } else {
                    int currentMatchedStudent = -1;
    
                    // Find the student currently matched to the high school
                    for (int i = 0; i < n; i++) {
                        if (studentMatching.get(i) == highSchool) {
                            currentMatchedStudent = i;
                            break;
                        }
                    }
    
                    // Check if the high school prefers the free student over the current matched student
                    if (highschoolPrefs.get(highSchool).indexOf(freeStudent) < highschoolPrefs.get(highSchool).indexOf(currentMatchedStudent)) {
                        studentMatching.set(freeStudent, highSchool);
                        studentMatching.set(currentMatchedStudent, -1);
                    }
                }
            }
        }
    
        return new Matching(problem, studentMatching);
    }
    














































    /**
     * Determines a solution to the stable matching problem from the given input set. Study the
     * project description to understand the variables which represent the input to your solution.
     *
     * @return A stable Matching.
     */
    @Override
    public Matching stableMatchingGaleShapley_highschooloptimal(Matching problem) {


        /*
         * get data
         * create while loop for total spots
         * create 2d arraylist of high school spots
         * create arraylist of indices for high school spots 
         * create 
         * 
         * while spots remaining
         *      find a high school with remaining spots
         *      have it propose to its next highest preference student
         *      if the student is single, it accepts
         *      if the student is not single, use the students preference list to check if the high school proposing is higher or lower on his pref list
         *      if it's lower, do nothing
         *      if its higher, then remove that student from the arraylist of hs spots, and decrease the index of that high school
         *      then, update the Matching arraylist (constant)
         *      Then, update the corresponding high schools arraylist (constant)
         * 
         */


        int m = problem.getHighSchoolCount();
        int n = problem.getStudentCount();
        int totalSpots = problem.totalHighSchoolSpots();
        int currentlyTakenSpots =0;
        ArrayList<ArrayList<Integer>> highschoolPrefs = problem.getHighSchoolPreference();//indexed by high school, contains an arraylist of their student pref, indexed by student
        ArrayList<ArrayList<Integer>> studentPrefs = problem.getStudentPreference();//indexed by student, contains an arraylist of their high school pref, indexed by high school
        ArrayList<Integer> highschoolSpots = problem.getHighSchoolSpots();//indexed by high schools, contains there # of spots
        

        ArrayList<LinkedList<Integer>> proposals = new ArrayList<>(m); // Track the proposals made by each high school to students, indexed by high school
        for (int i = 0; i < m; i++) {
            proposals.add(new LinkedList<>());
        }

        ArrayList<Integer> proposalsIndex = new ArrayList<>(m);//index of proposals, tracks length of proposals List
        for (int i = 0; i < m; i++) {
            proposalsIndex.add(0);
        }
        ArrayList<Integer> nextPrefStudent = new ArrayList<>(m);//holds the index of the next student to propose to for each hs, indexed by hs
        for (int i = 0; i < m; i++) {
            nextPrefStudent.add(0);
        }

        ArrayList<Integer> matching= new ArrayList<>(n); // Initialize all students as unmatched
        for (int i = 0; i < n; i++) {
            matching.add(-1);
        }


        while (currentlyTakenSpots <totalSpots){
            int currentHighSchool = -1;
            int currentStudent = -1;
            //find a high school i with available spots

            for(int i =0; i < m;i++){
                if(proposalsIndex.get(i) < highschoolSpots.get(i)){ //check if has open spot
                    currentHighSchool = i;
                    break;
                }
            }
            if (currentHighSchool == -1) {
                throw new RuntimeException("Error: No open spots found");
            }

            //find next student
            currentStudent = highschoolPrefs.get(currentHighSchool).get(nextPrefStudent.get(currentHighSchool));
            nextPrefStudent.set(currentHighSchool,currentStudent + 1); //increment index

            //propose
            if(matching.get(currentStudent) ==-1){
                //match up, increment everything, decrease total spots
                currentlyTakenSpots++;
                matching.set(currentStudent,currentHighSchool);
                proposals.get(currentHighSchool).add(currentStudent);
                proposalsIndex.set(currentHighSchool,(proposalsIndex.get(currentHighSchool) +1 )); //increment index
            
            }else{
                //compare,maybe match up, maybe do nothing. If do nothing, still increment 
                //compare
                int compareHighSchool = matching.get(currentStudent);
                int compPref = studentPrefs.indexOf(compareHighSchool); //o(n) operation
                int currPreference = studentPrefs.indexOf(currentHighSchool);

                if(currPreference < compPref){ //lower index means higher preference, means switch
                    //switch
                    matching.set(currentStudent, currentHighSchool);//perform actual switch
                    proposals.get(compareHighSchool).remove(currentStudent);
                    proposalsIndex.set(compareHighSchool,proposalsIndex.get(compareHighSchool) -1);

                    proposals.get(currentHighSchool).add(currentStudent); //switch
                    proposalsIndex.set(currentHighSchool,proposalsIndex.get(currentHighSchool) +1);

                }
                //if index is higher, then it's lower preference, don't switch
            }
            
        } 

        return new Matching(problem, matching);

    }
    
    
}

/*
 * matching object includes
 * m number of high schools
 * n number of students
 * highschool rpeference list (arraylist of arraylist)
 * stdeunt preference 
 * high school spots
 * student matching
 * 
 * 
 */